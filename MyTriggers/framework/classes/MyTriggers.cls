/**
* MyTriggers - adapted from TriggerX (2013) by Sebastian Wagner
* Copyright (c) 2018 appero GmbH. All rights reserved.
*
* This work is licensed under the terms of the MIT license.  
* For a copy, see <LICENCE> in this repository or   
* <https://opensource.org/licenses/MIT>.
*
* @created: 8-2018
* @author: info@appero.com
*
* @Description Leightweight Custom Metadata driven Trigger Framework that scales to your needs. Provided with <3 by appero.com
*/


global virtual class MyTriggers {

    global class myTriggersException extends Exception {}

    @TestVisible
    private static List<MyTriggerSetting__mdt> triggerHandlerSettingMocks;

    @TestVisible
    private static sObjectType sObjectTypeMock;

    @TestVisible
    private static String triggerEventMock;

    /**
     * used to store type of current instance for the recursion control in the variable alreadyUpdatedIdsPerClass
     * this is required due to some limitations in apex, which don't allow retrieving the type of an instance
     */
    private Type handlerType;

	/**
     * cast records to appropriate sObjectType in implementations
     */
    global sObject[] records;

    /**
     * Global Constructor reserved for future use
     * 
     */
    global myTriggers(){
        //empty
    }

    /**
     * used instead of constructor since handlers are instanciated with an empty contructor
     * @param  records Array of sObjects. for INSERT & UPDATE Trigger.new otherwise Trigger.old
     * @param classNamespacePrefix namespace of the class that is constructed (required for per class recursion control)
     * @param className class name of the class
     * @return         instance
     */
    global virtual myTriggers doConstruct(sObject[] records, Type handlerType){

    	this.records = records;
        this.handlerType = handlerType;

        return this;
    }
	
    //--------------------------------------------------------------
    // implementable Handlers
    //--------------------------------------------------------------

    /**
     * executed to perform BEFORE_INSERT operations
     */
    global virtual void onBeforeInsert(){}

    /**
     * executed to perform AFTER_INSERT operations
     */
    global virtual void onAfterInsert(){}

    /**
     * executed to perform BEFORE_UPDATE operations
     * @param  triggerOldMap 
     */
    global virtual void onBeforeUpdate(Map<Id,sObject> triggerOldMap){}
    
    /**
     * executed to perform AFTER_UPDATE operations
     * @param  triggerOldMap 
     */
    global virtual void onAfterUpdate(Map<Id,sObject> triggerOldMap){}
    
    /**
     * executed to perform BEFORE_DELETE operations
     */
    global virtual void onBeforeDelete(){}

    /**
     * executed to perform AFTER_DELETE operations
     */
    global virtual void onAfterDelete(){}

    /**
     * executed to perform AFTER_UNDELETE operations
     */
    global virtual void onAfterUndelete(){}

    //--------------------------------------------------------------
    // General Handling
    //--------------------------------------------------------------


    /**
     * Entry point of myTriggers framework - called from implementations
     */
    global static void run(){

        SObjectType currentSObjectType;
        if (Test.isRunningTest() && sObjectTypeMock != null) {
            currentSObjectType = sObjectTypeMock;
        } else {
            currentSObjectType = Trigger.new != null ? Trigger.new.getSObjectType() : Trigger.old.getSObjectType();
        }

        if (currentSObjectType != executionContextSObjectType) {
            setTriggerHandlerMaps(currentSObjectType);
        }
        executionContextSObjectType = currentSObjectType;
        
        if (triggerEventsToTriggerHandlers == null || triggerEventsToTriggerHandlers.isEmpty()) {
            return;
        }

        String eventString = Test.isRunningTest() && triggerEventMock != null ? triggerEventMock : Trigger.operationType.name();
        
        List<MyTriggerSetting__mdt> triggerHandlerSettings = triggerEventsToTriggerHandlers.get(eventString);

        if (triggerHandlerSettings == null) {
            return;
        }

        for (MyTriggerSetting__mdt triggerHandlerSetting : triggerHandlerSettings) {
            Type handlerType = getTriggerHandlerType(triggerHandlerSetting.ClassNamespacePrefix__c, triggerHandlerSetting.Class__c);
            run(handlerType);
        }
    }
	
	
    //--------------------------------------------------------------
    // Methods to track updated records or if a record has changed fields
    //--------------------------------------------------------------
	
    static Set<Id> alreadyUpdatedIds = new Set<Id>(); 
 
    /**
     * add set of ids to updatedIds
     * @param  idSet usally Trigger.newMap.keyset()
     */
    global static void addUpdatedIds(Set<Id> idSet){
        alreadyUpdatedIds.addAll(idSet);    
    }

    /**
     *Contains a map of Type.getName() and a set of already updated Ids
     *the getRecordsNotYetProcessed() method only returns Ids where the Ids are neither included in
     *the alreadyUpdatedIds set or in the alreadyUpdatedIdsForType.get(<<currentType>>.getName()) set
     */
    static Map<string, Set<Id>> alreadyUpdatedIdsForType = new Map<string, Set<Id>>(); 
 
    /**
     * add set of ids to updatedIds
     * @param  idSet usally Trigger.newMap.keyset()
     */
    global void addUpdatedIdsForType(Set<Id> idSet){
        if(!alreadyUpdatedIdsForType.containsKey(handlerType.getName()))
        {
            alreadyUpdatedIdsForType.put(handlerType.getName(), new Set<Id>());
        }

        alreadyUpdatedIdsForType.get(handlerType.getName()).addAll(idSet);    
    }

    
    /**
     * return all updated ids
     * @return   set of updated/already touched Ids
     */
    global static Set<Id> getUpdatedIds(){
    	return alreadyUpdatedIds;
    }

	
	 /**
     * returns a list of objects that have not been processed yet
     * @return           records[] not yet processed
     */
	global protected sObject[] getRecordsNotYetProcessed(){

        Set<Id> updatedIds = myTriggers.getUpdatedIds();
        sObject[] recordsNotYetProcessed  = records.clone();
        recordsNotYetProcessed.clear();

        for (sObject record : records) {
            Id recordId = (Id)record.get('Id');
        	if (!updatedIds.contains(recordId)) {
                if(alreadyUpdatedIdsForType.containsKey(handlerType.getName())){
                    if(!alreadyUpdatedIdsForType.get(handlerType.getName()).contains(recordId)){
                        //add if the id is neither in the updatedIds set and in the alreadyUpdatedIdsPerClass.get(classFullName) set
                        recordsNotYetProcessed.add(record);
                    }
                }
                else {
                    //add if the id is not in the updatedIds set and no set for this class exists in the alreadyUpdatedIdsPerClass map
                    recordsNotYetProcessed.add(record);
                }
        	}
        }

        return recordsNotYetProcessed;
    }

    /**
     * returns true if a value of one of the specified fields has changed
     * @param  fieldList 
     * @param  record    
     * @param  recordOld 
     */
    global static Boolean hasChangedFields(String[] fieldList, sObject record, sObject recordOld){
        for (String field : fieldList) {
            if (record.get(field) != recordOld.get(field)) {
                return true;
            }
        }
        return false;
    }
 
    /**
     * returns true if a value of one of the specified fields has changed
     * @param  fieldList
     * @param  record    
     * @param  recordOld 
     */
    global static Boolean hasChangedFields(sObjectField[] fieldList, sObject record, sObject recordOld){
        for (sObjectField field : fieldList) {
            if (record.get(field) != recordOld.get(field)) {
                return true;
            }
        }
        return false;
    }

    /**
     * returns a list of changed fields based on provided fieldList list
     * @param  fieldList
     * @param  record
     * @param  recordOld
     */
    global static String[] getChangedFields(String[] fieldList, sObject record, sObject recordOld){
        String[] changedFieldNames = new String[]{};

        for (String field:fieldList) {
            if (record.get(field) != recordOld.get(field)) {
                changedFieldNames.add(field);
            }
        }

        return changedFieldNames;
    }

     
    /**
     * returns a list of changed fields based on provided fieldList list
     * @param  fieldList
     * @param  record
     * @param  recordOld
     */
    global static sObjectField[] getChangedFields(sObjectField[] fieldList, sObject record, sObject recordOld){
        sObjectField[] changedFields = new sObjectField[]{};

        for (sObjectField field:fieldList) {
            if (record.get(field) != recordOld.get(field)) {
                changedFields.add(field);
            }
        }

        return changedFields;
    }
	
	//--------------------------------------------------------------
    // EVENT Control for advanced use cases 
    //--------------------------------------------------------------

    static Map<Type,Set<String>> classNameToDisabledTriggerEventsMap = new Map<Type,Set<String>>();

    static Set<Type> alreadyCheckedClasses = new Set<Type>(); 

	
    /**
     * loads trigger event settings MyTriggerSetting__mdt
     * @param  triggerHandlerType
     * @param  forceInit            force reload of event settings 
     */
    global static void setAllowedTriggerEvents(Type triggerHandlerType, Boolean forceInit){
        if (alreadyCheckedClasses.contains(triggerHandlerType) && !forceInit) {
            return;
        }        
        Set<String> events = getDisabledEvents(triggerHandlerType);
        Set<String> enabledEventsInSettings = new Set<String>();
        String classNameWithNamespace = triggerHandlerType.getName().toUpperCase();

        if (handlerClassesToTriggerHandlers!= null && handlerClassesToTriggerHandlers.containsKey(classNameWithNamespace)) {
            for (MyTriggerSetting__mdt handlerSetting : handlerClassesToTriggerHandlers.get(classNameWithNamespace)) {
                enabledEventsInSettings.add(handlerSetting.Event__c);
            }
        }

        for (System.TriggerOperation op : System.TriggerOperation.values()) {
            if (!enabledEventsInSettings.contains(op.name())) {
                events.add(op.name());
            }
        }
        
        alreadyCheckedClasses.add(triggerHandlerType);
    }

    /**
     * loads trigger event settings MyTriggerSetting__mdt
     * Method also works in subscriber org with hidden (public) trigger handlers from managed package
     * @param  namespacePrefix
     * @param  className
     * @param  forceInit
     */
    global static void setAllowedTriggerEvents(String namespacePrefix, String className, Boolean forceInit){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        setAllowedTriggerEvents(triggerHandlerType, forceInit);
    }

    /**
     * returns set of disabled events
     * @param  className
     * @return           Set of disabled Event Namens (e.g. 'AFTER_UPDATE')
     */
    global static Set<String> getDisabledEvents(Type className){

        if (!classNameToDisabledTriggerEventsMap.containsKey(className)) {
            classNameToDisabledTriggerEventsMap.put(className,new Set<String>());
        }
        return classNameToDisabledTriggerEventsMap.get(className);
    }

    /**
     * returns set of disabled events
     * Method also works in subscriber org with hidden (public) trigger handlers from managed package
     * @param  namespacePrefix
     * @param  className
     * @return                 Set<String>
     */
    global static Set<String> getDisabledEvents(String namespacePrefix, String className){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        return getDisabledEvents(triggerHandlerType);
    }

    /**
     * returns true if the specified event is disabled
     * @param  className className String
     * @param  event     event System.TriggerOperation 
     * @return           Boolean
     */
    global static Boolean isDisabled(Type className, System.TriggerOperation event){
        return getDisabledEvents(className).contains(event.name());
    }

    /**
     * returns true if the specified event is disabled
     * Method also works in subscriber org with hidden (public) trigger handlers from managed package
     * @param  namespacePrefix
     * @param  className
     * @param  event
     */
    global static Boolean isDisabled(String namespacePrefix, String className, System.TriggerOperation event){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        return isDisabled(triggerHandlerType, event);
    }

    /**
     * getInsertEvents all insert events
     * @return   System.TriggerOperation[]
     */
    global static System.TriggerOperation[] getInsertEvents(){
        return new System.TriggerOperation[]{System.TriggerOperation.BEFORE_INSERT,
											 System.TriggerOperation.AFTER_INSERT};
    }

    /**
     * get all upadte Events
     * @return   all update events
     */
    global static System.TriggerOperation[] getUpdateEvents(){
        return new System.TriggerOperation[]{System.TriggerOperation.BEFORE_UPDATE,
			                                 System.TriggerOperation.AFTER_UPDATE};
    }

    /**
     * getDeleteEvents all delete events
     * @return   all delete events
     */
    global static System.TriggerOperation[] getDeleteEvents(){
        return new System.TriggerOperation[]{
              System.TriggerOperation.BEFORE_DELETE
            , System.TriggerOperation.AFTER_DELETE};
    }

    /**
     * list of all BEFORE System.TriggerOperation enums
     * @return   all before events
     */
    global static System.TriggerOperation[] getBeforeEvents(){
        return new System.TriggerOperation[]{
        	  System.TriggerOperation.BEFORE_INSERT
        	, System.TriggerOperation.BEFORE_UPDATE
        	, System.TriggerOperation.BEFORE_DELETE};
    }
 
    /**
     * list of all AFTER System.TriggerOperation enums
     * @return   all after events
     */
    global static System.TriggerOperation[] getAfterEvents(){
        return new System.TriggerOperation[]{System.TriggerOperation.AFTER_INSERT,
		                                     System.TriggerOperation.AFTER_UPDATE, 
											 System.TriggerOperation.AFTER_DELETE, 
											 System.TriggerOperation.AFTER_UNDELETE};
    }


    /**
     * disables all events for System.Type MyClass
     * @param  myClass
     */
    global static void disable(Type MyClass){

        System.TriggerOperation[] allEvents = new System.TriggerOperation[]{};
        allEvents.addAll(getBeforeEvents());
        allEvents.addAll(getAfterEvents());

        disable(MyClass,allEvents);
    }

    /**
     * disable disables all events for the trigger handler with given namespace and classname
     * Method also works in subscriber org with hidden (public) trigger handlers from managed package
     * @param  namespacePrefix
     * @param  className
     */
    global static void disable(String namespacePrefix, String className){
        
        System.TriggerOperation[] allEvents = new System.TriggerOperation[]{};
        allEvents.addAll(getBeforeEvents());
        allEvents.addAll(getAfterEvents());

        disable(namespacePrefix,className,allEvents);
    }

    /**
     * removes all disabled events for the System.Type MyClass
     * @param  MyClass
     */
    global static void enable(Type MyClass){
        getDisabledEvents(MyClass).clear();
    }

    /**
     * removes all disabled events for given ClassName and Namespace
     * Also works in subscriber org with packaged public trigger handlers implementing MyTriggers
     * @param  namespacePrefix String
     * @param  className       String
     */
    global static void enable(String namespacePrefix, String className){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        enable(triggerHandlerType);
    }

    /**
     * disable disable all specificed events for the System.Type MyClass
     * @param  MyClass
     * @param  events
     */
    global static void disable(Type MyClass, System.TriggerOperation[] events){
        getDisabledEvents(MyClass).addAll(toStringEvents(events));
    }

    /**
     * disable all specificed events for given ClassName and Namespace
     * Also works in subscriber org with packaged public trigger handlers implementing MyTriggers
     * @param  namespacePrefix
     * @param  className
     * @param  events
     */
    global static void disable(String namespacePrefix, String className, System.TriggerOperation[] events){
        getDisabledEvents(namespacePrefix, className).addAll(toStringEvents(events));
    }

    /**
     * enable all specificed events for the System.Type MyClass
     * @param  MyClass
     * @param  events
     */
    global static void enable(Type MyClass, System.TriggerOperation[] events){
        getDisabledEvents(MyClass).removeAll(toStringEvents(events));
    }

    /**
     * enable all specificed events for given ClassName and Namespace
     * Also works in subscriber org with packaged public trigger handlers implementing MyTriggers
     * @param  namespacePrefix
     * @param  className
     * @param  events
     */
    global static void enable(String namespacePrefix, String className, System.TriggerOperation[] events){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        enable(triggerHandlerType, events);
    }

    /**
     * disable a single event for System.Type MyClass
     * @param  MyClass
     * @param  event
     */
    global static void disable(Type MyClass, System.TriggerOperation event){
        getDisabledEvents(MyClass).add(event.name());
    }

    /**
     * disable a single event for ClassName and Namespace
     * Also works in subscriber org with packaged public trigger handlers implementing MyTriggers
     * @param  namespacePrefix
     * @param  className
     * @param  event
     */
    global static void disable(String namespacePrefix, String className, System.TriggerOperation event){
        getDisabledEvents(namespacePrefix, className).add(event.name());
    }

    /**
     * enable a single event for System.Type MyClass
     * @param  MyClass
     * @param  event
     */
    global static void enable(Type MyClass, System.TriggerOperation event){
        getDisabledEvents(MyClass).remove(event.name());
    }

    /**
     * enable a single event for ClassName and Namespace
     * Also works in subscriber org with packaged public trigger handlers implementing MyTriggers
     * @param  namespacePrefix
     * @param  className
     * @param  event
     */
    global static void enable(String namespacePrefix, String className, System.TriggerOperation event){
        Type triggerHandlerType = getTriggerHandlerType(namespacePrefix, className);
        enable(triggerHandlerType, event);
    }
 
    /**
     * converts a Set of Event enums into Strings
     * @param  events
     * @return        Names of Enums
     */
    global static Set<String> toStringEvents(System.TriggerOperation[] events){
        Set<String> output = new Set<String>();
        for (System.TriggerOperation e:events) {
        	output.add(e.name());
        }
        return output;        
    }
	
    //--------------------------------------------------------------
    // TRIGGER FRAMEWORK
    //--------------------------------------------------------------

    @TestVisible
    private static SObjectType executionContextSObjectType;

    private static Set<String> namespacePrefixes;

    private static Map<String, List<MyTriggerSetting__mdt>> triggerEventsToTriggerHandlers;

    private static Map<String, List<MyTriggerSetting__mdt>> handlerClassesToTriggerHandlers;
      
    /**
     * instanciates the applicable Trigger Handler object and passes it with Trigger context to run()
     * @param  handlerType
     */
    @testVisible
    private static void run(Type handlerType){
        run((myTriggers)handlerType.newInstance(), 
			  handlerType,
			  Trigger.isBefore,
			  Trigger.isInsert,
              Trigger.IsUpdate,
              Trigger.isDelete,
              Trigger.isUndelete,
              Trigger.new,
              Trigger.oldMap);
    }

    /**
     * routes Trigger contexts to methods
     * @param  handler
     * @param  handlerType
     * @param  isBefore
     * @param  isInsert
     * @param  isUpdate
     * @param  isDelete
     * @param  isUndelete
     * @param  triggerNew
     * @param  triggerOldMap 
     */
    @testVisible
    private static void run(myTriggers handler, Type handlerType, Boolean isBefore, Boolean isInsert, Boolean isUpdate, Boolean isDelete, Boolean isUndelete, sObject[] triggerNew, Map<Id,sObject> triggerOldMap){
		setAllowedTriggerEvents(handlerType,false);

        Set<String> disabledTriggerEvents = getDisabledEvents(handlerType);
        if (isBefore) {
            if (isInsert && !disabledTriggerEvents.contains(System.TriggerOperation.BEFORE_INSERT.name())) {
                handler.doConstruct(triggerNew, handlerType).onBeforeInsert(); 
            }
            else if (isUpdate && !disabledTriggerEvents.contains(System.TriggerOperation.BEFORE_UPDATE.name())) {
                 handler.doConstruct(triggerNew, handlerType).onBeforeUpdate(triggerOldMap);
            }
            else if (isDelete && !disabledTriggerEvents.contains(System.TriggerOperation.BEFORE_DELETE.name())) {
                 handler.doConstruct(triggerOldMap.values(), handlerType).onBeforeDelete();
            }
        } else {
            if (isInsert && !disabledTriggerEvents.contains(System.TriggerOperation.AFTER_INSERT.name())) {
                handler.doConstruct(triggerNew, handlerType).onAfterInsert();
            } 
            else if (isUpdate && !disabledTriggerEvents.contains(System.TriggerOperation.AFTER_UPDATE.name())) {
                system.debug('On After Handler: ' + handler);
                handler.doConstruct(triggerNew, handlerType).onAfterUpdate(triggerOldMap);
            }
            else if (isDelete && !disabledTriggerEvents.contains(System.TriggerOperation.AFTER_DELETE.name())) {
                handler.doConstruct(triggerOldMap.values(), handlerType).onAfterDelete();
            }
            else if (isUndelete && !disabledTriggerEvents.contains(System.TriggerOperation.AFTER_UNDELETE.name())) {
                handler.doConstruct(triggerNew, handlerType).onAfterUndelete();
            }
        }
    }

    /**
     * Returns type of triggerHandler class according to given triggerHandlerSetting
     * @param  triggerHandlerSetting
     * @param  namespacePrefixes
     * @return handlerType
     */
    @testVisible
    private static Type getTriggerHandlerType(String namespacePrefix, String className){
        namespacePrefix = namespacePrefix == null ? '' : namespacePrefix;
        Type handlerType = Type.forName(namespacePrefix, className);

        //In case handler is part of the subscriber org
        if (handlerType == null) {
            handlerType = Type.forName('', className);
        }
        if (handlerType == null) {
            throw new myTriggersException(Label.Errors_CannotFindTriggerHandlerClass + ':' + (namespacePrefix == null ? '' : namespacePrefix + '.') + className);
        }
        return handlerType;
    }
    
    /**
     * Set maps containing triggerHandlerSetting records for given sObjectType
     * @param  objectType SobjectType
     */
    @TestVisible
    private static void setTriggerHandlerMaps(sObjectType objectType) {
        triggerEventsToTriggerHandlers = new Map<String, List<MyTriggerSetting__mdt>>();
        handlerClassesToTriggerHandlers = new Map<String, List<MyTriggerSetting__mdt>>();
        for (MyTriggerSetting__mdt triggerSetting : getTriggerHandlerSettings(objectType)) {
            if (!triggerEventsToTriggerHandlers.containsKey(triggerSetting.Event__c)) {
                triggerEventsToTriggerHandlers.put(triggerSetting.Event__c, new List<MyTriggerSetting__mdt>());
            }
            triggerEventsToTriggerHandlers.get(triggerSetting.Event__c).add(triggerSetting);
            String namespacePrefix = triggerSetting.ClassNamespacePrefix__c == null ? '' : triggerSetting.ClassNamespacePrefix__c;
            String classWithNamespaceKey = getClassNameWithNamespace(triggerSetting);
            if (!handlerClassesToTriggerHandlers.containsKey(classWithNamespaceKey)) {
                handlerClassesToTriggerHandlers.put(classWithNamespaceKey, new List<MyTriggerSetting__mdt>());
            }
            handlerClassesToTriggerHandlers.get(classWithNamespaceKey).add(triggerSetting);
        }
    }

    private static String getClassNameWithNamespace(MyTriggerSetting__mdt triggerHandlerSetting){
        String namespacePrefix = String.isBlank(triggerHandlerSetting.ClassNamespacePrefix__c) ? '' : triggerHandlerSetting.ClassNamespacePrefix__c;
        return (String.isBlank(namespacePrefix) ? '' :  namespacePrefix.toUpperCase() + '.') + triggerHandlerSetting.Class__c.toUpperCase();
    }

    /**
     * Returns list of triggerHandlerSetting for sObjectType
     * @param sObjectType
     * @return triggerHandlerSetting for sObjectType
     */
    private static List<MyTriggerSetting__mdt> getTriggerHandlerSettings(sObjectType objectType){
        String sObjectName = objectType.getDescribe().getName();
        List<MyTriggerSetting__mdt> triggerHandlerSettings;

        if (Test.isRunningTest() && triggerHandlerSettingMocks != null) {
            triggerHandlerSettings = triggerHandlerSettingMocks;
        } else {
            triggerHandlerSettings = new List<MyTriggerSetting__mdt>(
                [SELECT DeveloperName, 
				        ClassNamespacePrefix__c, 
						Event__c, 
						sObject__c,
                                                sObject__r.QualifiedApiName, 
						Class__c, 
						Order__c
                FROM MyTriggerSetting__mdt
                WHERE sObject__r.QualifiedApiName = :sObjectName 
                    AND Active__c = true
                ORDER BY Order__c, 
                         DeveloperName ASC]);
        }

        return triggerHandlerSettings;
    }

}
